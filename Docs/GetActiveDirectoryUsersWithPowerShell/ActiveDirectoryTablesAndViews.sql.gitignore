--#################################################################################################
-- Three core tables to hold, Users,Groups and Group Members
--#################################################################################################
If Object_Id('[dbo].[GetActiveDirectoryUsers]') Is Not Null
    Drop Table [dbo].[GetActiveDirectoryUsers]; 
Go
Create Table [dbo].[GetActiveDirectoryUsers]
    (
      [ID] Int Identity(1 , 1)
               Not Null
    , [CanonicalName] Varchar(128) Not Null
    , [DomainName] As Left([CanonicalName] ,
                           CharIndex('/' , [CanonicalName]) - 1)
    , [sAMAccountName] Varchar(128) Not Null
    , [OperationalUnit] Varchar(128) Null
    , [FirstName] Varchar(128) Null
    , [LastName] Varchar(128) Null
    , [DisplayName] Varchar(128) Null
    , [email] Varchar(128) Null
    , [EmailAddress] Varchar(128) Null
    , [ImpliedAcount] As ( Case When CharIndex('@' , [EmailAddress]) > ( 0 )
                                     And CharIndex('.' , [EmailAddress]) > CharIndex('@' ,
                                                              [EmailAddress])
                                Then ( Substring([EmailAddress] ,
                                                 CharIndex('@' ,
                                                           [EmailAddress])
                                                 + ( 1 ) ,
                                                 ( CharIndex('.' ,
                                                             [EmailAddress])
                                                   - CharIndex('@' ,
                                                              [EmailAddress]) )
                                                 - ( 1 )) + '\' )
                                     + Substring([EmailAddress] , ( 1 ) ,
                                                 CharIndex('@' ,
                                                           [EmailAddress])
                                                 - ( 1 ))
                                Else ''
                           End ) Persisted
    , [StreetAddress] Varchar(128) Null
    , [City] Varchar(128) Null
    , [State] Varchar(128) Null
    , [PostalCode] Varchar(128) Null
    , [HomePhone] Varchar(128) Null
    , [MobilePhone] Varchar(128) Null
    , [OfficePhone] Varchar(128) Null
    , [Fax] Varchar(128) Null
    , [Company] Varchar(128) Null
    , [Organization] Varchar(128) Null
    , [Department] Varchar(128) Null
    , [Title] Varchar(128) Null
    , [Description] Varchar(128) Null
    , [Office] Varchar(128) Null
    , [extensionAttribute1] Varchar(128) Null
    , [extensionAttribute2] Varchar(128) Null
    , [extensionAttribute3] Varchar(128) Null
    , [extensionAttribute4] Varchar(128) Null
    , [extensionAttribute5] Varchar(128) Null
    , [AccountExpires] Varchar(128) Null
    , [AccountIsEnabled] Varchar(128) Null
    , [PasswordLastSet] Varchar(128) Null
    , [PasswordAge] As ( Case When IsDate([PasswordLastSet]) = ( 1 )
                              Then DateDiff(Day , [PasswordLastSet] ,
                                            GetDate())
                              Else ( 0 )
                         End )
    , [PasswordExpires] Varchar(128) Null
    , [PasswordNeverExpires] Varchar(128) Null
    , [PasswordIsExpired] Varchar(128) Null
    , [LastLogonTimestamp] Varchar(128) Null
    , [CreatedDate] DateTime Null
    , [DWCreatedDate] DateTime
        Null
        Constraint [DF__GetActiveDirectoryUsers__DWCreatedDate]
        Default ( GetDate() )
    , [DWUpdatedDate] DateTime Null
    , Constraint [PK__GetActiveDirectoryUsers_sAMAccountName] Primary Key Clustered
        ( [CanonicalName] , [sAMAccountName] Asc )
    );


If Object_Id('[dbo].[GetActiveDirectoryGroups]') Is Not Null
    Drop Table [dbo].[GetActiveDirectoryGroups]; 
Go
Create Table [dbo].[GetActiveDirectoryGroups]
    (
      [ID] Int Identity(1 , 1)
               Not Null
    , [CanonicalName] Varchar(128) Not Null
    , [DomainName] As Left([CanonicalName] ,
                           CharIndex('/' , [CanonicalName]) - 1)
    , [SamAccountName] Varchar(128) Not Null
    , [DisplayName] Varchar(128) Null
    , [Description] Varchar(128) Null
    , [DistinguishedName] Varchar(128) Null
    , [GroupCategory] Varchar(128) Null
    , [GroupScope] Varchar(128) Null
    , [CreatedDate] DateTime Null
    , [DWCreatedDate] DateTime
        Null
        Constraint [DF__GetActiveDirectoryGroups__DWCreatedDate]
        Default ( GetDate() )
    , [DWUpdatedDate] DateTime Null
    , Constraint [PK__GetActiveDirectoryGroups_SamAccountName] Primary Key Clustered
        ( [CanonicalName] , [SamAccountName] Asc )
    );



If Object_Id('[dbo].[GetActiveDirectoryGroupMembers]') Is Not Null
    Drop Table [dbo].[GetActiveDirectoryGroupMembers]; 
Go
Create Table [dbo].[GetActiveDirectoryGroupMembers]
    (
      [ID] Int Identity(1 , 1)
               Not Null
    , [GroupCanonicalName] Varchar(128) Not Null
    , [GroupSamAccountName] Varchar(128) Not Null
    , [DomainName] As Left([GroupCanonicalName] ,
                           CharIndex('/' , [GroupCanonicalName]) - 1)
    , [SamAccountName] Varchar(128) Not Null
    , [ObjectClass] Varchar(128) Not Null
    , [DWCreatedDate] DateTime
        Null
        Constraint [DF__GetActiveDirectoryGroupMembers__DWCreatedDate]
        Default ( GetDate() )
    , [DWUpdatedDate] DateTime Null
    , [DWIsDeleted] Bit
        Null
        Constraint [DF__GetActiveDirectoryGroupMembers__DWIsDeleted]
        Default ( (0) )
    , [DWDeletedDate] DateTime Null
    , Constraint [UQ_GetActiveDirectoryGroupMembers_GroupUserObject] Unique Clustered
        ( [GroupCanonicalName] Asc , [GroupSamAccountName] Asc , [SamAccountName] Asc , [ObjectClass] Asc )
    );

--#################################################################################################
-- Some Handy Views to make the data a wee bit more accessible.
--#################################################################################################

If Object_Id('[dbo].[vwActiveDirectoryUsers]') Is Not Null
    Drop  View      [dbo].[vwActiveDirectoryUsers]; 
Go
--#################################################################################################
-- vwActiveDirectoryUsers, subset of data, underlying table populated by a powershell script and Scheduled job three times a week
--#################################################################################################
--SELECT * FROM vwActiveDirectoryUsers
Create View [vwActiveDirectoryUsers]
As
    Select  Case When [AD].[AccountIsEnabled] = 'False' Then 1
                 When [AD].[PasswordIsExpired] = 'True'
                      And [AD].[PasswordNeverExpires] = 'False' Then 1
                 Else 0
            End As [IsDisabledOrLockedOut]
          , Case When ( [AD].[PasswordIsExpired] = 'False'
                        And [AD].[AccountIsEnabled] = 'True'
                      )
                      And IsDate([AD].[LastLogonTimestamp]) = 1
                      And Convert(DateTime , [AD].[LastLogonTimestamp]) >= DateAdd(dd ,
                                                              -30 , GetDate())
                 Then 1
                 Else 0
            End As [ActiveLast30Days]
          , [AD].[ID] As [ID]
          , Left([AD].[CanonicalName] ,
                 CharIndex('/' , [AD].[CanonicalName]) - 1) As [DomainName]
          , [AD].[FirstName]
          , [AD].[LastName]
          , [AD].[DisplayName] As [Name]
          , [AD].[EmailAddress] As [email]
          , [AD].[sAMAccountName]
          , [AD].[ImpliedAcount]
          , [AD].[AccountExpires]
          , [AD].[PasswordLastSet]
          , [AD].[PasswordAge]
          , [AD].[PasswordExpires]
          , [AD].[PasswordNeverExpires]
          , [AD].[PasswordIsExpired]
          , '' As [PasswordStatus]
          , [AD].[AccountIsEnabled]
          , [AD].[LastLogonTimestamp]
          , [AD].[DWCreatedDate]
          , [AD].[DWUpdatedDate]
    From    [GetActiveDirectoryUsers] [AD];
Go

If Object_Id('[dbo].[vwActiveDirectoryGroupMembers]') Is Not Null
    Drop  View      [dbo].[vwActiveDirectoryGroupMembers]; 
Go
--#################################################################################################
-- vwADGroupMembers, underlying table populated  by a powershell script and Scheduled job once a month
--#################################################################################################
Create View [vwActiveDirectoryGroupMembers]
As
    Select  Left([g].[CanonicalName] ,
                 CharIndex('/' , [g].[CanonicalName]) - 1) As [GroupDomainName]
          , [g].[SamAccountName] As [GroupSamAccountName]
          , [g].[DisplayName] As [GroupDisplayName]
          , [u].*
    From    [GetActiveDirectoryGroupMembers] [gm]
            Inner Join [GetActiveDirectoryGroups] [g] On [gm].[GroupSamAccountName] = [g].[SamAccountName]
                                                         And [gm].[DomainName] = [g].[DomainName]
            Inner Join [GetActiveDirectoryUsers] [u] On [gm].[SamAccountName] = [u].[sAMAccountName]
                                                        And [gm].[DomainName] = [u].[DomainName];
Go
If Object_Id('[dbo].[vwGetActiveDirectoryUsers]') Is Not Null
    Drop  View      [dbo].[vwGetActiveDirectoryUsers]; 
Go
--#################################################################################################
-- vwGetActiveDirectoryUsers, full column list,underlying table populated by a powershell script and Scheduled job three times a week
--#################################################################################################
Create View [vwGetActiveDirectoryUsers]
As
    Select  Case When ( [AD].[PasswordIsExpired] = 'True'
                        And [AD].[AccountIsEnabled] = 'True'
                      )
                      Or [AD].[AccountIsEnabled] = 'False' Then 1
                 Else 0
            End As [IsDisabledOrLockedOut]
          , Case When ( [AD].[PasswordIsExpired] = 'False'
                        And [AD].[AccountIsEnabled] = 'True'
                      )
                      And IsDate([AD].[LastLogonTimestamp]) = 1
                      And Convert(DateTime , [AD].[LastLogonTimestamp]) >= DateAdd(dd ,
                                                              -30 , GetDate())
                 Then 1
                 Else 0
            End As [ActiveLast30Days]
          , [AD].[ID]
          , [AD].[CanonicalName]
          , [AD].[DomainName]
          , [AD].[sAMAccountName]
          , [AD].[OperationalUnit]
          , [AD].[FirstName]
          , [AD].[LastName]
          , [AD].[DisplayName]
          , [AD].[email]
          , [AD].[EmailAddress]
          , [AD].[ImpliedAcount]
          , [AD].[StreetAddress]
          , [AD].[City]
          , [AD].[State]
          , [AD].[PostalCode]
          , [AD].[HomePhone]
          , [AD].[MobilePhone]
          , [AD].[OfficePhone]
          , [AD].[Fax]
          , [AD].[Company]
          , [AD].[Organization]
          , [AD].[Department]
          , [AD].[Title]
          , [AD].[Description]
          , [AD].[Office]
          , [AD].[extensionAttribute1]
          , [AD].[extensionAttribute2]
          , [AD].[extensionAttribute3]
          , [AD].[extensionAttribute4]
          , [AD].[extensionAttribute5]
          , [AD].[AccountExpires]
          , [AD].[AccountIsEnabled]
          , [AD].[PasswordLastSet]
          , [AD].[PasswordAge]
          , [AD].[PasswordExpires]
          , [AD].[PasswordNeverExpires]
          , [AD].[PasswordIsExpired]
          , [AD].[LastLogonTimestamp]
          , [AD].[CreatedDate]
          , [AD].[DWCreatedDate]
          , [AD].[DWUpdatedDate]
    From    [GetActiveDirectoryUsers] [AD]; 

Go
If Object_Id('[dbo].[vwActiveDirectorySummary]') Is Not Null
    Drop  View      [dbo].[vwActiveDirectorySummary]; 
Go
--#################################################################################################
-- vwActiveDirectorySummary, rollup of data, underlying table populated by a powershell script and Scheduled job three times a week
--#################################################################################################
Create View [vwActiveDirectorySummary]
As
    Select  [AD].[DomainName]
          , Count(*) As [TotalADUsers]
          , Sum(Case When ( [AD].[PasswordIsExpired] = 'True'
                            And [AD].[AccountIsEnabled] = 'True'
                          )
                          Or [AD].[AccountIsEnabled] = 'False' Then 1
                     Else 0
                End) As [IsDisabledOrLockedOut]
          , Sum(Case When [AD].[PasswordIsExpired] = 'True'
                          And [AD].[AccountIsEnabled] = 'False' Then 1
                     Else 0
                End) As [LockedOut]
          , Sum(Case When [AD].[AccountIsEnabled] = 'True' Then 1
                     Else 0
                End) As [IsDisabled]
          , Sum(Case When ( [AD].[PasswordIsExpired] = 'False'
                            And [AD].[AccountIsEnabled] = 'False'
                          ) Then 1
                     Else 0
                End) As [NotDisabledOrLockedOut]
          , Sum(Case When ( [AD].[PasswordIsExpired] = 'False'
                            And [AD].[AccountIsEnabled] = 'False'
                          )
                          And IsDate([AD].[LastLogonTimestamp]) = 0 Then 1
                     Else 0
                End) As [NeverLoggedIn]
          , Sum(Case When ( [AD].[PasswordIsExpired] = 'False'
                            And [AD].[AccountIsEnabled] = 'False'
                          )
                          And IsDate([AD].[LastLogonTimestamp]) = 1
                          And Convert(DateTime , [AD].[LastLogonTimestamp]) >= DateAdd(dd ,
                                                              -30 , GetDate())
                     Then 1
                     Else 0
                End) As [ActiveLast30Days]
          , Sum(Case When ( [AD].[PasswordIsExpired] = 'False'
                            And [AD].[AccountIsEnabled] = 'False'
                          )
                          And IsDate([AD].[LastLogonTimestamp]) = 1
                          And Convert(DateTime , [AD].[LastLogonTimestamp]) <= DateAdd(dd ,
                                                              -30 , GetDate())
                          And [AD].[PasswordIsExpired] = 'False'
                          And [AD].[AccountIsEnabled] = 'False' Then 1
                     Else 0
                End) As [NotActiveInMoreThan30Days]
          , '' As [Filler]
    From    [dbo].[GetActiveDirectoryUsers] [AD]
    Group By [AD].[DomainName];
Go
